@using Blazor.QuickWeather.Models
@inject IWeatherServiceFactory WeatherServiceFactory

<div class="weather-widget">
    <!-- Current Weather Header with Refresh Button -->
    <div class="current-weather-header">
        <h2 class="location">@(WeatherData?.Location ?? "Loading...")</h2>
        <button class="refresh-button" @onclick="OnDemandUpdate" title="Refresh">🔄</button>
    </div>

    <!-- Current Weather Section -->
    <div class="current-weather">
        <div class="temperature">
            <span>@(Math.Round(WeatherData?.Temperature ?? 0))°</span>
            <img src="@GetWeatherIconUrl(WeatherData?.Icon)" alt="@WeatherData?.Description" class="forecast-icon" />
        </div>
        <p class="description">@(WeatherData?.Description ?? "Fetching weather...")</p>
    </div>

    <!-- 5-Day Forecast Section -->
    @if (ForecastData != null)
    {
        <div class="forecast">
            @foreach (var day in ForecastData)
            {
                <div class="forecast-day">
                    <span class="day">@day.Date</span>
                    <img src="@GetWeatherIconUrl(day.Icon)" alt="@day.Description" class="forecast-icon" />
                    <span class="temp">@Math.Round(day.MaxTemperature)° <small>@Math.Round(day.MinTemperature)°</small></span>
                </div>
            }
        </div>
    }

    <!-- Footer with Last Updated -->
    <div class="weather-footer">
        <p>Last updated: @LastUpdated.ToString("HH:mm:ss") <br />Source: @SelectedResource</p>
    </div>
</div>

@code {
    [Parameter] public string Location { get; set; } = "London";
    [Parameter] public WeatherResource? SelectedResource { get; set; }
    [Parameter] public int UpdateIntervalSeconds { get; set; } = 30;
    private List<ForecastDay>? ForecastData;

    private CurrentWeatherData? WeatherData;
    private Timer? UpdateTimer;
    private DateTime LastUpdated;

    protected override async Task OnInitializedAsync()
    {
        await LoadWeatherData();
        StartTimer();
    }

    private async Task LoadWeatherData()
    {
        var request = new WeatherRequest
            {
                CityName = Location,
                Longitude = 33.4299,  // Replace with actual longitude if available
                Latitude = 35.1264,   // Replace with actual latitude if available
                IpAddress = string.Empty // Optionally use the user's IP address
            };

        if (SelectedResource == null)
        {
            SelectedResource = WeatherResource.WeatherApi;
        }

        var weatherService = WeatherServiceFactory.Create(SelectedResource.Value);

        WeatherData = await weatherService.GetCurrentWeatherAsync(request);

        if (WeatherData != null)
        {
            LastUpdated = DateTime.Now;

            ForecastData = (await weatherService.GetForecastWeatherAsync(request)).Forecast;
        }
        else
        {
            ForecastData = null;
        }
    }

    private async Task OnDemandUpdate()
    {
        await LoadWeatherData();
        StateHasChanged();
    }

    private void StartTimer()
    {
        if (UpdateIntervalSeconds < 1)
        {
            throw new ArgumentException("UpdateIntervalSeconds must be greater than or equal to 1 second.");
        }

        var updateIntervalMilliseconds = UpdateIntervalSeconds * 1000;

        UpdateTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await LoadWeatherData();
                StateHasChanged();
            });
        }, null, updateIntervalMilliseconds, updateIntervalMilliseconds);
    }

    private string GetWeatherIconUrl(string icon)
    {
        return SelectedResource switch
        {
            WeatherResource.OpenWeatherMap => $"https://openweathermap.org/img/wn/{icon}@2x.png",
            WeatherResource.WeatherApi => icon,
            _ => string.Empty
        };
    }

    public void Dispose()
    {
        UpdateTimer?.Dispose();
    }
}